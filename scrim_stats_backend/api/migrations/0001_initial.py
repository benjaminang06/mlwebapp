# Generated by Django 4.2.19 on 2025-03-27 03:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Match",
            fields=[
                ("match_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "match_date",
                    models.DateField(help_text="The date when the match occurred"),
                ),
                (
                    "match_duration",
                    models.DurationField(
                        blank=True,
                        help_text="Duration of the match (HH:MM:SS)",
                        null=True,
                    ),
                ),
                (
                    "is_external_match",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this match is between external teams (not involving our team)",
                        verbose_name="External Match",
                    ),
                ),
                (
                    "scrim_type",
                    models.CharField(
                        choices=[
                            ("SCRIMMAGE", "Scrimmage"),
                            ("TOURNAMENT", "Tournament"),
                            ("RANKED", "Ranked"),
                        ],
                        default="PRACTICE",
                        max_length=50,
                    ),
                ),
                (
                    "match_outcome",
                    models.CharField(
                        choices=[("VICTORY", "Victory"), ("DEFEAT", "Defeat")],
                        max_length=10,
                    ),
                ),
                ("score_details", models.JSONField(blank=True, null=True)),
                ("general_notes", models.TextField(blank=True, null=True)),
                ("game_number", models.IntegerField()),
                (
                    "team_side",
                    models.CharField(
                        choices=[("BLUE", "Blue Side"), ("RED", "Red Side")],
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Player",
            fields=[
                ("player_id", models.AutoField(primary_key=True, serialize=False)),
                ("current_ign", models.CharField(max_length=100)),
                (
                    "primary_role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("JUNGLER", "Jungler"),
                            ("MID", "Mid Laner"),
                            ("ROAMER", "Roamer"),
                            ("EXP", "Exp Laner"),
                            ("GOLD", "Gold Laner"),
                            ("FLEX", "Flex Player"),
                            ("COACH", "Coach"),
                            ("ANALYST", "Analyst"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("profile_image_url", models.URLField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="ScrimGroup",
            fields=[
                ("scrim_group_id", models.AutoField(primary_key=True, serialize=False)),
                ("scrim_group_name", models.CharField(max_length=200)),
                ("start_date", models.DateField()),
                ("notes", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                ("team_id", models.AutoField(primary_key=True, serialize=False)),
                ("team_name", models.CharField(max_length=100)),
                ("team_abbreviation", models.CharField(max_length=10)),
                ("team_category", models.CharField(max_length=20)),
                (
                    "is_opponent_only",
                    models.BooleanField(
                        default=False,
                        help_text="Check this if this team is only used as an opponent and not managed by any users",
                        verbose_name="Opponent Team Only",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "managers",
                    models.ManyToManyField(
                        blank=True,
                        related_name="managed_teams",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PlayerTeamHistory",
            fields=[
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("joined_date", models.DateField()),
                ("left_date", models.DateField(blank=True, null=True)),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="team_history",
                        to="api.player",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.team"
                    ),
                ),
            ],
            options={
                "ordering": ["-joined_date"],
            },
        ),
        migrations.CreateModel(
            name="PlayerMatchStat",
            fields=[
                ("stats_id", models.AutoField(primary_key=True, serialize=False)),
                ("role_played", models.CharField(blank=True, max_length=50, null=True)),
                ("hero_played", models.CharField(max_length=100, verbose_name="Hero")),
                ("kills", models.IntegerField()),
                ("deaths", models.IntegerField()),
                ("assists", models.IntegerField()),
                ("computed_kda", models.FloatField()),
                ("damage_dealt", models.IntegerField(blank=True, null=True)),
                ("damage_taken", models.IntegerField(blank=True, null=True)),
                ("turret_damage", models.IntegerField(blank=True, null=True)),
                ("teamfight_participation", models.FloatField(blank=True, null=True)),
                ("gold_earned", models.IntegerField(blank=True, null=True)),
                ("player_notes", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "match",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="player_stats",
                        to="api.match",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="match_stats",
                        to="api.player",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="match_stats",
                        to="api.team",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PlayerAlias",
            fields=[
                ("alias_id", models.AutoField(primary_key=True, serialize=False)),
                ("alias", models.CharField(max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="aliases",
                        to="api.player",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="player",
            name="teams",
            field=models.ManyToManyField(
                related_name="players", through="api.PlayerTeamHistory", to="api.team"
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="opponent_team",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="away_matches",
                to="api.team",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="our_team",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="home_matches",
                to="api.team",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="scrim_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="matches",
                to="api.scrimgroup",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="submitted_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name="Hero",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("role", models.CharField(blank=True, max_length=50)),
                ("released_date", models.DateField(blank=True, null=True)),
                (
                    "image_url",
                    models.URLField(
                        blank=True, help_text="URL to the hero's image", null=True
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "indexes": [
                    models.Index(fields=["name"], name="api_hero_name_6ed91a_idx"),
                    models.Index(fields=["role"], name="api_hero_role_f3b693_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="FileUpload",
            fields=[
                ("file_id", models.AutoField(primary_key=True, serialize=False)),
                ("file_url", models.URLField()),
                ("file_type", models.CharField(max_length=20)),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "match",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="files",
                        to="api.match",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TeamManagerRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("head_coach", "Head Coach"),
                            ("assistant", "Assistant Coach"),
                            ("analyst", "Analyst"),
                            ("viewer", "Viewer"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="manager_roles",
                        to="api.team",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="team_roles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("team", "user")},
            },
        ),
        migrations.CreateModel(
            name="MatchAward",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "award_type",
                    models.CharField(
                        choices=[
                            ("MVP", "Most Valuable Player"),
                            ("MVP_LOSS", "Most Valuable Player (Losing Team)"),
                            ("MOST_DAMAGE", "Highest Damage"),
                            ("MOST_GOLD", "Highest Gold"),
                            ("MOST_TURRET_DAMAGE", "Most Turret Damage"),
                            ("MOST_DAMAGE_TAKEN", "Most Damage Taken"),
                            ("BEST_KDA", "Best KDA Ratio"),
                            ("MOST_KILLS", "Most Kills"),
                            ("MOST_ASSISTS", "Most Assists"),
                            ("LEAST_DEATHS", "Least Deaths"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "stat_value",
                    models.FloatField(
                        blank=True,
                        help_text="The relevant stat value (e.g., KDA for MVP)",
                        null=True,
                    ),
                ),
                (
                    "match",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="awards",
                        to="api.match",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="awards",
                        to="api.player",
                    ),
                ),
            ],
            options={
                "unique_together": {("match", "award_type")},
            },
        ),
        migrations.CreateModel(
            name="DraftInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "choice_type",
                    models.CharField(
                        choices=[("PICK", "Pick"), ("BAN", "Ban")], max_length=4
                    ),
                ),
                ("hero", models.CharField(max_length=100, verbose_name="Hero")),
                ("draft_position", models.IntegerField()),
                (
                    "draft_phase",
                    models.IntegerField(
                        choices=[
                            (1, "First Phase"),
                            (2, "Second Phase"),
                            (3, "Third Phase"),
                        ]
                    ),
                ),
                (
                    "ban_phase",
                    models.CharField(
                        choices=[
                            ("FIRST_ROUND", "First Ban Round (2+2)"),
                            ("SECOND_ROUND", "Second Ban Round (1+1)"),
                            ("THIRD_ROUND", "Third Ban Round (1+1)"),
                            ("NONE", "Not a Ban"),
                        ],
                        default="NONE",
                        help_text="Specific ban round in the draft process",
                        max_length=15,
                    ),
                ),
                (
                    "draft_format",
                    models.CharField(
                        choices=[
                            ("6BAN", "6-Ban Format (2-2-1-1)"),
                            ("10BAN", "10-Ban Format (2-2-1-1-1-1-1-1)"),
                            ("CUSTOM", "Custom Format"),
                        ],
                        default="6BAN",
                        help_text="Ban format used in this match",
                        max_length=10,
                    ),
                ),
                (
                    "role_picked_for",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "strategy_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes on why this hero was picked/banned",
                        null=True,
                    ),
                ),
                (
                    "team_side",
                    models.CharField(
                        choices=[
                            ("BLUE", "Blue Side (First Pick)"),
                            ("RED", "Red Side (Second Pick)"),
                        ],
                        help_text="Whether team was blue (first pick) or red side",
                        max_length=4,
                    ),
                ),
                (
                    "match",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="draft_info",
                        to="api.match",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="draft_choices",
                        to="api.player",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="draft_records",
                        to="api.team",
                    ),
                ),
            ],
            options={
                "ordering": ["match", "draft_position"],
                "indexes": [
                    models.Index(
                        fields=["team", "choice_type", "hero"],
                        name="api_draftin_team_id_fc828d_idx",
                    ),
                    models.Index(
                        fields=["match", "team_side"],
                        name="api_draftin_match_i_28e8ef_idx",
                    ),
                    models.Index(
                        fields=["draft_position", "draft_phase"],
                        name="api_draftin_draft_p_c67b72_idx",
                    ),
                ],
                "unique_together": {("match", "draft_position")},
            },
        ),
    ]
